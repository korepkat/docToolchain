//tag::exportAnsible[]
import static groovy.io.FileType.FILES

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

import org.yaml.snakeyaml.Yaml

task exportAnsible(
        description: 'exports description and documentation from meta files of ansible roles',
        group: 'docToolchain'
) {
    doFirst {
        new File(targetDir).mkdirs()
    }
    doLast {
        logger.info("docToolchain> docDir: "+docDir)
        logger.info("docToolchain> mainConfigFile: "+mainConfigFile)
        def config = new ConfigSlurper().parse(new File(docDir, mainConfigFile).text)
        def output = "== Roles \n\n"

        def parser = new Yaml()
        def shortInfo = ['author', 'company', 'license', 'dependencies']
        def argInfo = ['type','required','default','description']

        org.codehaus.groovy.runtime.NullObject.metaClass.toString = {return ''}

        new File(docDir, config.exportAnsible.rolesDir).eachFileRecurse(FILES) {
            if (it.absolutePath.endsWith('meta/main.yml')){
                def dir = it.path.split('/')
                def roleOutput = "=== " + dir[(dir.size()-3)].capitalize() +"\n\n"

                // get meta information
                def cfg = parser.load( it.text )
                def ginfo = cfg.get("galaxy_info")

                if ( ginfo != null )
                {
                    roleOutput += """${ginfo['description']} 

==== Info
[cols=\"2,6\"]
|====\n\n"""

                    shortInfo.each{
                        if ( ginfo[it] != null )
                        {
                            roleOutput += "| *${it.capitalize()}* \n"
                            roleOutput += "| ${ginfo[it]} \n"
                        }
                    }

                    if ( ginfo['galaxy_tags'] != null )
                    {
                        roleOutput += "| *Tags* \n"
                        roleOutput += "| ${ginfo['galaxy_tags'].join(', ')} \n"
                    }

                    def dep = cfg.get("dependencies")
                    if ( dep != null )
                    {
                        roleOutput += "| *Dependencies* \n"
                        roleOutput += "| ${dep.join(', ')} \n"
                    }

                    roleOutput += "\n|====\n\n"

                    if ( ginfo["longDescription"] != null )
                    {
                        roleOutput += "==== Description \n\n"
                        roleOutput += "${ginfo["longDescription"]} \n\n"
                    }
                }
                def argSpecificationPath = "${it.getParent()}/argument_specs.yml"
                def argSpecificationFile = new File(argSpecificationPath)
                if ( argSpecificationFile.exists() )
                {
                    def argCfg = parser.load( argSpecificationFile.text )
                    def argSpec = argCfg.get("argument_specs")
                    if( argSpec != null &&
                        argSpec["main"] != null &&
                        argSpec["main"]["options"] != null
                      )
                    {
                        roleOutput += """==== Arguments 

This role can be parameterized by
followoing arguments. Use the inventory specific
configuration file in group_vars folder.

[options=\"header\",cols=\"2,1,1,1,3\"]
|====
| Name
| Type
| Required
| Default
| Description\n\n"""
                        argSpec["main"]["options"].each{ k, v ->
                            roleOutput += "| $k \n"
                            argInfo.each{
                                roleOutput += "| ${v[it]} \n"
                            }
                            roleOutput += "\n"
                        }
                        roleOutput += "|==== \n\n"
                    }
                }
                output += roleOutput
            }
        }

        
        def apiFile = new File(docDir, config.exportAnsible.outFile)
        logger.info "> changelog exported ${apiFile.canonicalPath}"
        apiFile.write(output)
    }
}
//end::exportAnsible[]
